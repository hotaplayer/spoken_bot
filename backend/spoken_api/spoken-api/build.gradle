plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
}

group = 'me.spokenbot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation "org.apache.commons:commons-lang3:3.6"
    implementation "commons-io:commons-io:2.11.0"

    implementation 'cn.hutool:hutool-all:5.8.4'
    implementation("com.google.guava:guava:31.1-jre")

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // java sdk
    implementation ("org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:3.1.0")

    // mysql
    implementation 'mysql:mysql-connector-java'
    implementation('com.alibaba:druid:1.2.14')

    // swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    destinationDir file('dist')
    archiveName "spokenbot" + version + '.jar'
    doLast {
        copy {
            from file('config')
            into 'dist/config/'
        }
        copy {
            from configurations.runtimeClasspath
            into 'dist/lib'
        }
        copy {
            from file('src/main/resources/application.yml')
            into 'dist/config/'
        }
        copy {
            from file('src/main/resources/start.sh')
            into 'dist/'
        }
        copy {
            from file('src/main/resources/stop.sh')
            into 'dist/'
        }
    }
}

clean {
    println "delete ${projectDir}/dist"
    delete "${projectDir}/dist"
}
